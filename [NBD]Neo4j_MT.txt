1.

 MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies) RETURN hugo,hugoWeavingMovies

*******************

2.

 MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies)<-[:DIRECTED]-(director:Person) RETURN hugoWeavingMovies,director

 ******************

3.

 MATCH (hugo:Person {name:"Hugo Weaving"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN hugo,m,coActors

 ******************

4.

 MATCH (actor:Person)-[a:ACTED_IN]-(m:Movie) WITH actor, count(a) AS acting WHERE acting > 1 RETURN actor, acting

*******************

5.

MATCH (a)-[:WROTE]->(b)
WHERE (a)-[:DIRECTED]->(b)
RETURN a.name, b.title

*******************

6.

MATCH (a {name: 'Hugo Weaving'})-[:ACTED_IN]->(b)<-[:ACTED_IN]- (c {name: 'Keanu Reeves'})
RETURN b


*******************

7.

CREATE (CapitanAmerica:Movie {title:'Captain America: The First Avenger', released:2011, tagline:'When patriots become heroes'})
CREATE (Joe:Person {name:'Joe Johnston', born:1950})
CREATE (Christopher:Person {name:'Christopher Markus'})
CREATE (Stephen:Person {name:'Stephen McFeely'})
CREATE (Chris:Person {name:'Chris Evans', born:1981})
CREATE (Samuel:Person {name:'Samuel L. Jackson', born:1948})
CREATE
	(Samuel)-[:ACTED_IN {roles:['Nick Fury']}]->(CapitanAmerica),
 	(Chris)-[:ACTED_IN {roles:['Captain America ']}]->(CapitanAmerica),
  	(Joe)-[:DIRECTED]->(CapitanAmerica),
  	(Christopher)-[:WROTE]->(CapitanAmerica),
  	(Stephen)-[:WROTE]->(CapitanAmerica)

WITH CapitanAmerica as m
MATCH (a)- ->(m) RETURN a, m
;

********************

8.

MATCH (d {name: 'Darjeeling'})-[p *]->(s {name: 'Sandakphu'}) RETURN d, s, p


********************

9.

MATCH a = allShortestPaths((d {name: 'Darjeeling'})-[p *]->(s {name: 'Sandakphu'})) RETURN a

********************

10.

MATCH a = allShortestPaths((d {name: 'Darjeeling'})-[*]->(s {name: 'Sandakphu'}))
RETURN a, filter(x IN relationships(a) WHERE x.winter = "true")

*********************

11. 

MATCH a = (d {name: 'Darjeeling'})-[*]->(s {name: 'Sandakphu'})
WITH relationships(a) AS ar
UNWIND ar AS x
WITH ar, sum(x.distance) AS distance
ORDER BY distance
RETURN ar, distance

*********************

12.

MATCH a = (d {name: 'Darjeeling'})-[:twowheeler*]->(s)
WITH relationships(a) AS ar
WITH filter(x IN ar WHERE x.summer = "true") as summerPaths
RETURN summerPaths

**********************

13.

MATCH a = (d {name: 'Darjeeling'})<-[:twowheeler*]-(s)
WITH relationships(a) AS ar
WITH filter(x IN ar WHERE x.summer = "true") as summerPaths
RETURN summerPaths

**********************

14.

MATCH (f:Flight)-[:ORIGIN]->(a:Airport)
WITH a, count(f) AS fCount
ORDER BY fCount DESC
RETURN a, fCount

**********************

#########      CREATING ADDITIONAL RELATIONSHIPS     ################

MATCH (o:Airport)-[fo:ORIGIN]-(f)-[fd:DESTINATION]-(d:Airport)
WITH o, f, d
MATCH (f)-[]-(t:Ticket)
MERGE (o)-[r:FLY_TO_TICKET {idf:id(f), idt:id(t), class: t.class}]->(d)
RETURN o, r, d, f, t

***********************

15.

MATCH p = ((o:Airport {name: "LAX"})-[:FLY_TO_TICKET*..3]->(d:Airport))
WHERE ALL(x IN NODES(p) WHERE SINGLE(y IN NODES(p) WHERE y = x))
WITH p, relationships(p) AS rp
UNWIND rp As r
MATCH (t)
WHERE ID(t) = r.idt
WITH p, t
WITH p, sum(t.price) AS sumP
WHERE sumP < 3000
RETURN p, sumP

**********************

16.


MATCH p = ((o:Airport {name: "LAX"})-[:FLY_TO_TICKET*..3]->(d:Airport {name: "DAY"}))
WHERE ALL(x IN NODES(p) WHERE SINGLE(y IN NODES(p) WHERE y = x))
WITH p, relationships(p) AS rp
UNWIND rp As r
MATCH (t)
WHERE ID(t) = r.idt
WITH p, r, t
WITH p, sum(t.price) AS sumP
RETURN p, sumP ORDER BY sumP

************************

17. 

MATCH p = ((o:Airport {name: "LAX"})-[:FLY_TO_TICKET*..3]->(d:Airport {name: "DAY"}))
WHERE ALL(x IN NODES(p) WHERE SINGLE(y IN NODES(p) WHERE y = x))
WITH p, relationships(p) AS rp
UNWIND rp As r
MATCH (t)
WHERE ID(t) = r.idt
WITH p, t
WITH p, sum(t.price) AS sumP
RETURN p, sumP
ORDER BY sumP
LIMIT 1

***********************

18.

MATCH p = ((o:Airport {name: "LAX"})-[:FLY_TO_TICKET*..3 {class: "business"}]->(d:Airport {name: "DAY"}))
WHERE ALL(x IN NODES(p) WHERE SINGLE(y IN NODES(p) WHERE y = x))
WITH p, relationships(p) AS rp
UNWIND rp As r
MATCH (t)
WHERE ID(t) = r.idt
WITH p, sum(t.price) AS sumP
RETURN p, sumP
ORDER BY sumP
LIMIT 1

***********************

19.


***********************


20.

MATCH p = ((o:Airport)-[:FLY_TO_TICKET *2]->(d:Airport))
WHERE ALL(x IN NODES(p) WHERE SINGLE(y IN NODES(p) WHERE y = x))
WITH p, relationships(p) AS rp
UNWIND rp As r
MATCH (t)
WHERE ID(t) = r.idt
WITH p, sum(t.price) AS sumP
RETURN p, sumP
ORDER BY sumP
LIMIT 1

***********************


